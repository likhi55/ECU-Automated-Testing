name: Post-merge Tests (push to main)

on:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  test-on-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: make all

      - name: Run testcases
        run: |
          if [ -x "./run_testcases.sh" ]; then
            ./run_testcases.sh || true
          fi

      - name: Ensure Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Parse test summary
        id: summary
        run: |
          python tools/parse_test_summary.py testcases_run_summary.md > result.txt || true
          echo "result=$(cat result.txt)" >> $GITHUB_OUTPUT

      - name: Find most recent merged PR
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const commits = await github.rest.repos.listCommits({owner, repo, per_page: 10, sha: context.ref.replace('refs/heads/','')});
            // naive: try to match the push head commit to a merged PR
            const headSha = commits.data[0].sha;
            const prs = await github.rest.search.issuesAndPullRequests({ q: `repo:${owner}/${repo} is:pr is:merged ${headSha}`});
            const pr = prs.data.items[0];
            return pr ? { number: pr.number, title: pr.title, body: pr.body, headRef: pr.head && pr.head.ref } : {};
          result-encoding: json

      - name: Extract SCR ID
        id: scr
        run: |
          TITLE="${{ fromJSON(steps.pr.outputs.result).title || '' }}"
          BODY="$(echo "${{ fromJSON(steps.pr.outputs.result).body || '' }}" | tr '\n' ' ')"
          HEAD="${{ fromJSON(steps.pr.outputs.result).headRef || '' }}"
          EXTRACT() { echo "$1" | grep -oE 'SCR[0-9]{6}' | head -n1 || true; }
          ID=$(EXTRACT "$HEAD"); [ -z "$ID" ] && ID=$(EXTRACT "$TITLE"); [ -z "$ID" ] && ID=$(EXTRACT "$BODY")
          echo "id=$ID" >> $GITHUB_OUTPUT
          echo "SCR_ID=$ID"

      - name: Update linked SCR issue
        if: steps.scr.outputs.id != ''
        uses: actions/github-script@v7
        with:
          script: |
            const scrId = '${{ steps.scr.outputs.id }}';
            const result = '${{ steps.summary.outputs.result }}';
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const search = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue in:title ${scrId}`
            });
            const issue = search.data.items.find(i => i.title.includes(scrId));
            if (!issue) { core.warning(`No SCR issue for ${scrId}`); return; }

            const issue_number = issue.number;
            const body = `**Post-merge test summary for ${scrId}**\n\nResult: \`${result}\``;

            if (result.startsWith('PASS')) {
              await github.rest.issues.removeLabel({owner, repo, issue_number, name: 'rework'}).catch(()=>{});
              await github.rest.issues.addLabels({owner, repo, issue_number, labels: ['closed']});
              await github.rest.issues.removeLabel({owner, repo, issue_number, name: 'open'}).catch(()=>{});
              await github.rest.issues.removeLabel({owner, repo, issue_number, name: 'in progress'}).catch(()=>{});
              await github.rest.issues.createComment({owner, repo, issue_number, body});
              await github.rest.issues.update({owner, repo, issue_number, state: 'closed'});
            } else {
              await github.rest.issues.addLabels({owner, repo, issue_number, labels: ['rework']});
              await github.rest.issues.removeLabel({owner, repo, issue_number, name: 'closed'}).catch(()=>{});
              await github.rest.issues.createComment({owner, repo, issue_number, body: body + "\n\nOne or more tests failed."});
            }
